require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UserGamesController do
  login_user
  render_views
  # This should return the minimal set of attributes required to create a valid
  # UserGame. As you add validations to UserGame, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "user_id" => "1" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UserGamesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
    @game = FactoryGirl.create(:game)
    result = rand(-1..1)
    @user_game = FactoryGirl.create(:user_game, user_id: @user_id, game_id: @game.to_param, result: result)
    @invalid_attributes = FactoryGirl.build(:user_game, user_id: @user_id, game_id: @game.to_param, result: "aerg").attributes
  end

  describe "GET index" do
    it "assigns all user_games as @user_games" do
      get :index, {}, valid_session
      expect(assigns(:user_games)).to eq([@user_game])
    end
  end

  describe "GET show" do
    it "assigns the requested user_game as @user_game" do
      get :show, {:id => @user_game.to_param}, valid_session
      expect(assigns(:user_game)).to eq(@user_game)
    end
  end

  describe "GET new" do
    it "assigns a new user_game as @user_game" do
      get :new, {}, valid_session
      expect(assigns(:user_game)).to be_a_new(UserGame)
    end
  end

  describe "GET edit" do
    it "assigns the requested user_game as @user_game" do
      get :edit, {:id => @user_game.to_param}, valid_session
      expect(assigns(:user_game)).to eq(@user_game)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new UserGame" do
        expect {
          post :create, {:user_game => @user_game.attributes}, valid_session
        }.to change(UserGame, :count).by(1)
      end

      it "assigns a newly created user_game as @user_game" do
        post :create, {:user_game => @user_game.attributes}, valid_session
        expect(assigns(:user_game)).to be_a(UserGame)
        expect(assigns(:user_game)).to be_persisted
      end

      it "redirects to the created users games list" do
        post :create, {:user_game => @user_game.attributes}, valid_session
        expect(response).to redirect_to(user_games_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved user_game as @user_game" do
        # Trigger the behavior that occurs when invalid params are submitted
        UserGame.any_instance.stub(:save).and_return(false)
        post :create, {:user_game => @invalid_attributes}, valid_session
        expect(assigns(:user_game)).to be_a_new(UserGame)
      end

      it "redirect the root template" do
        # Trigger the behavior that occurs when invalid params are submitted
        UserGame.any_instance.stub(:save).and_return(false)
        post :create, {:user_game => @invalid_attributes}, valid_session
        expect(response).to redirect_to(root_path)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      before (:each) do
        @valid_attributes = FactoryGirl.build(:user_game, user_id: @user_id).attributes
      end
      it "updates the requested user_game" do
        # Assuming there are no other user_games in the database, this
        # specifies that the UserGame created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        expect_any_instance_of(UserGame).to receive(:update).with({ "user_id" => @user.to_param })
        put :update, {:id => @user_game.to_param, :user_game => { "user_id" => @user.to_param }}, valid_session
      end

      it "assigns the requested user_game as @user_game" do
        put :update, {:id => @user_game.to_param, :user_game => @valid_attributes}, valid_session
        expect(assigns(:user_game)).to eq(@user_game)
      end

      it "redirects to the user_game" do
        put :update, {:id => @user_game.to_param, :user_game => @valid_attributes}, valid_session
        expect(response).to redirect_to(@user_game)
      end
    end

    describe "with invalid params" do
      it "assigns the user_game as @user_game" do
        # Trigger the behavior that occurs when invalid params are submitted
        UserGame.any_instance.stub(:save).and_return(false)
        put :update, {:id => @user_game.to_param, :user_game => @invalid_attributes}, valid_session
        expect(assigns(:user_game)).to eq(@user_game)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        UserGame.any_instance.stub(:save).and_return(false)
        put :update, {:id => @user_game.to_param, :user_game => @invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user_game" do
      expect {
        delete :destroy, {:id => @user_game.to_param}, valid_session
      }.to change(UserGame, :count).by(-1)
    end

    it "redirects to the user_games list" do
      delete :destroy, {:id => @user_game.to_param}, valid_session
      expect(response).to redirect_to(user_games_url)
    end
  end

end
